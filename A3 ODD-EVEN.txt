#evenoddperceptron A3
import numpy as np

digits = {
    str(i): v for i, v in enumerate([
        [1,1,1,0,1,1,1],[0,0,1,0,0,1,0],[1,0,1,1,1,0,1],[1,0,1,1,0,1,1],
        [0,1,1,1,0,1,0],[1,1,0,1,0,1,1],[1,1,0,1,1,1,1],[1,0,1,0,0,1,0],
        [1,1,1,1,1,1,1],[1,1,1,1,0,1,1]
    ])
}

X = np.array(list(digits.values()))
y = np.array([i % 2 for i in range(10)])  # 0 = even, 1 = odd

class Perceptron:
    def __init__(self, lr=0.1, n_iters=1000):
        self.lr, self.n_iters = lr, n_iters
        self.weights = self.bias = 0

    def fit(self, X, y):
        self.weights = np.zeros(X.shape[1])
        for _ in range(self.n_iters):
            for xi, yi in zip(X, y):
                pred = np.where(np.dot(xi, self.weights) + self.bias >= 0, 1, 0)
                update = self.lr * (yi - pred)
                self.weights += update * xi
                self.bias += update

    def predict(self, x):
        return np.where(np.dot(x, self.weights) + self.bias >= 0, 1, 0)

model = Perceptron()
model.fit(X, y)

for i in range(10):
    p = model.predict(digits[str(i)])
    print(f"Number: {i}  ASCII: {digits[str(i)]}  Prediction: {'Even' if p == 0 else 'Odd'}")

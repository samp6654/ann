import numpy as np
import matplotlib.pyplot as plt

# 1. parameter initialization 2. training 3. validation 4. activation function
class Perceptron:
    def __init__(self, learning_rate=0.1, n_iters=100):
        self.lr = learning_rate
        self.n_iters = n_iters
        self.activation_func = self._unit_step_func
        self.weights = None
        self.bias = None
    def fit(self, X, y):
        n_samples, n_features = X.shape
        # init parameters
        self.weights = np.zeros(n_features)
        self.bias = 0.05
        # to plot the decision boundary we need to make it 0.05
        # instead of 0
        y_ = np.array([1 if i > 0 else 0 for i in y])
        for _ in range(self.n_iters):
            for idx, x_i in enumerate(X):
                linear_output = np.dot(x_i, self.weights) + self.bias
                y_predicted = self.activation_func(linear_output)
                # Perceptron update rule
                update = self.lr * (y_[idx] - y_predicted)
                self.weights += update * x_i
                self.bias += update
    def predict(self, X):
        linear_output = np.dot(X, self.weights) + self.bias
        y_predicted = self.activation_func(linear_output)
        return y_predicted
    def _unit_step_func(self, x):
        return np.where(x >= 0, 1, 0)
 # Data for the AND logic gate
X = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])
y = np.array([0, 0, 0, 1])
# Create and train the perceptron
p = Perceptron(learning_rate=0.1, n_iters=10)
p.fit(X, y)
# Plot the decision regions
plt.figure(figsize=(6, 4))
plt.scatter(X[:, 0], X[:, 1], c=y, cmap='viridis', s=100)
 # Plot decision boundary
x_values = np.linspace(-0.5, 1.5, 100)
y_values = -(p.weights[0] * x_values + p.bias) / p.weights[1]
plt.plot(x_values, y_values, color='red', label='Decision Boundary')
plt.xlim(-0.5, 1.5)
plt.ylim(-0.5, 1.5)
plt.xlabel("x1")
plt.ylabel("x2")
plt.title("Perceptron for AND logic")
plt.legend()
plt.show()